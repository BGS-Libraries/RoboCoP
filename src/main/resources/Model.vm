package ${packageName}.model;
## IMPORTS
## Declare all imports in alphabetical order.
#if($isTable)

import android.content.ContentValues;
import android.database.Cursor;
#end
import android.os.Parcel;
import android.os.Parcelable;
#if($hasDateType)
import android.text.TextUtils;
#end
#if($useBcLogger)
import com.brightcove.logger.BcLogger;
#else
import android.util.Log;
#end
#if($hasArrayType || $hasSerializedNames)

#end
#if($hasArrayType || $isClass)
import com.google.gson.Gson;
#end
#if($hasSerializedNames)
import com.google.gson.annotations.SerializedName;
#end
#if($hasArrayType)
import com.google.gson.reflect.TypeToken;
#end
#if($isTable)

import ${packageName}.database.table.${className}Table;
#end

#if($hasArrayType)
import java.lang.reflect.Type;
#end
#if($hasDateType)
import java.text.ParseException;
import java.text.SimpleDateFormat;
#end
#if($isTable || $hasArrayType)
import java.util.ArrayList;
#end
#if($hasDateType)
import java.util.Date;
#end
import java.util.List;
#if($hasDateType)
import java.util.Locale;
#end
## CLASS DECLARATION
## Declare the class name.

public class ${className} implements Parcelable {
## PRIVATE MEMBER VARIABLES
## Declare all private member variables for this class.
#if($isTable)
    private long mRowId;
#end
#foreach( $field in $fields )
#if($field)
#if(${field.getSerializedName()})

    @SerializedName("$field.getSerializedName()")
#elseif($serializeAllNames)

#if(!${field.getIsThrowableType()})
    @SerializedName("$field.getFieldName()")
#end
#end
    private ${field.getJavaTypeString()} ${field.getPrivateVariableName()};
#end
#end

## DATE FORMATS
## Declare static fields for any potential date formats.
#foreach( $field in $fields )
#if($field)
#if(${field.getIsDateType()})
    private static final String ${field.getStaticTimeFormatName()} = "${field.getTimeFormat()}";
#end
#end
#end
## FOREIGN KEYS
## Declare any foreign keys
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKey = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#if( $foreignKey )
    private Long ${foreignKey};
#end
#end
#end
#if($isTable)

    private ContentValues mValues = new ContentValues();
#end

## CONSTRUCTOR
## Declare basic constructors
    public ${className}() {}

#if($isTable)
    public ${className}(final Cursor cursor) {
        this(cursor, false);
    }

    public ${className}(final Cursor cursor, boolean prependTableName) {
        String prefix = prependTableName ? ${className}Table.TABLE_NAME + "_" : "";
        setRowId(cursor.getLong(cursor.getColumnIndex(prefix + ${className}Table._ID)));

        int colIndex;
#foreach ($field in $fields)
#if($field)
        colIndex = cursor.getColumnIndex(prefix + ${className}Table.${field.getConstantString()});
        if (colIndex >= 0) set${field.getNameAsTitleCase()}(cursor.${field.getJavaTypeStringGetter()}(colIndex)${field.getBooleanComparison()});
#end
#end
#if( $participatingRelationships )

#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#if( $foreignKeyTitleCase && $foreignKeyConstant)
        set${foreignKeyTitleCase}(cursor.getLong(cursor.getColumnIndex(prefix + ${className}Table.${foreignKeyConstant})));
#end
#end
#end
    }

## CONTENT VALUES GETTER
## Create method that returns all values as a ContentValues object
    public ContentValues getContentValues() {
        if (mValues.size() == 0) {
#if($hasArrayType)
            Gson gson = new Gson();
            Type listType;
            String jsonString;

#end
#if($hasDateType)
            Date date;

#end
            if(mRowId > 0) {
                mValues.put(${className}Table._ID, mRowId);
            }
#foreach ($field in $fields)
#if($field)
#if(${field.getIsArrayType()})

            listType = new TypeToken<List<${field.getFieldArrayType()}>>() {}.getType();
            jsonString = gson.toJson(${field.getPrivateVariableName()}, listType);
            mValues.put(${className}Table.${field.getConstantString()}, jsonString);

#elseif(${field.getIsClass()})
            mValues.put(${className}Table.${field.getConstantString()}, ${field.getPrivateVariableName()}.toString());
#elseif(${field.getIsDateType()})
            date = convertStringToDate(${field.getPrivateVariableName()}, ${field.getStaticTimeFormatName()});
            if (date != null) mValues.put(${className}Table.${field.getConstantString()}, date.getTime());
#else
            mValues.put(${className}Table.${field.getConstantString()}, ${field.getPrivateVariableName()});
#end
#end
#end
        }
        return mValues;
    }

    public void setRowId(long _id) {
        mRowId = _id;
        mValues.put(${className}Table._ID, _id);
    }

    public Long getRowId() {
        return mRowId;
    }

#end
##
## PARCELABLE CONSTRUCTORS AND METHODS
## Constructors and methods that allow the class to implement Parcelable
##
    public ${className}(Parcel parcel) {
#foreach( $field in $fields )
#if($field)
#if(${field.getParcelReadMethod()})
        ${field.getParcelReadMethod()};
#end
#end
#end
    }

    public static final Parcelable.Creator<${className}> CREATOR = new Parcelable.Creator<${className}>() {
        @Override
        public ${className} createFromParcel(Parcel source) {
            return new ${className}(source);
        }

        @Override
        public ${className}[] newArray(int size) {
            return new ${className}[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
#foreach( $field in $fields )
#if($field)
#if(${field.getParcelWriteMethod()})
        ${field.getParcelWriteMethod()};
#end
#end
#end
    }

##
## SETTERS
## Declare public setter methods.
##
#foreach ($field in $fields)
#if($field)
#if(${field.getIsDateType()})
    public void set${field.getNameAsTitleCase()}(Date ${field.getFieldName()}) {
        set${field.getNameAsTitleCase()}(convertDateToString(${field.getFieldName()}, ${field.getStaticTimeFormatName()}));
    }

    public void set${field.getNameAsTitleCase()}(long ${field.getFieldName()}) {
        set${field.getNameAsTitleCase()}(new Date(${field.getFieldName()}));
    }

#end
#if(${field.getIsClass()})
    public void set${field.getNameAsTitleCase()}(String ${field.getFieldName()}) {
        ${field.getPrivateVariableName()} = ${field.getJavaTypeString()}.fromJson(${field.getFieldName()});
#if($isTable)
        mValues.put(${className}Table.${field.getConstantString()}, ${field.getFieldName()});
#end
    }

#end
    public void set${field.getNameAsTitleCase()}(${field.getJavaTypeString()} ${field.getFieldName()}) {
        ${field.getPrivateVariableName()} = ${field.getFieldName()};
#if($isTable)
#if(${field.getIsArrayType()})
        Gson gson = new Gson();
        Type listType = new TypeToken<List<${field.getFieldArrayType()}>>() {}.getType();
        String jsonString = gson.toJson(${field.getFieldName()}, listType);
        mValues.put(${className}Table.${field.getConstantString()}, jsonString);
#elseif(${field.getIsClass()})
        mValues.put(${className}Table.${field.getConstantString()}, ${field.getFieldName()}.toString());
#elseif(${field.getIsDateType()})
        Date date = convertStringToDate(${field.getFieldName()}, ${field.getStaticTimeFormatName()});
        if (date != null) mValues.put(${className}Table.${field.getConstantString()}, date.getTime());
#else
        mValues.put(${className}Table.${field.getConstantString()}, ${field.getFieldName()});
#end
#end
    }
#if(${field.getIsArrayType()})

    public void set${field.getNameAsTitleCase()}(String ${field.getFieldName()}) {
        Gson gson = new Gson();
        Type listType = new TypeToken<List<${field.getFieldArrayType()}>>() {}.getType();
        ${field.getPrivateVariableName()} = gson.fromJson(${field.getFieldName()}, listType);
    }
#end

## GETTERS
## Declare public getter methods.
#if(${field.getIsDateType()})
    public Date get${field.getNameAsTitleCase()}() {
        return convertStringToDate(${field.getPrivateVariableName()}, ${field.getStaticTimeFormatName()});
    }

#else
    public ${field.getJavaTypeString()} get${field.getNameAsTitleCase()}() {
        return ${field.getPrivateVariableName()};
    }

#end
#end
#end
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyVariableName = $relationship.getForeignKeyVariableNameForTable($table) )
#set( $foreignKeyPrivateVariableName = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#if( $foreignKeyTitleCase )
    public void set${foreignKeyTitleCase}(Long ${foreignKeyVariableName}) {
        ${foreignKeyPrivateVariableName} = ${foreignKeyVariableName};
        mValues.put(${className}Table.${foreignKeyConstant}, ${foreignKeyVariableName});
    }

    public Long get${foreignKeyTitleCase}() {
            return ${foreignKeyPrivateVariableName};
    }

#end
#end
#end
#if($isTable)
    public static List<${className}> listFromCursor(Cursor cursor) {
        List<${className}> list = new ArrayList<>();

        if (cursor != null && cursor.moveToFirst()) {
            do {
                list.add(new ${className}(cursor));
            } while (cursor.moveToNext());
        }

        return list;
    }
#end
#if($isClass)
## TOSTRING METHOD
## Declare method that converts object to JSON

    @Override
    public String toString() {
        Gson gson = new Gson();
        return gson.toJson(this);
    }

## FROMSTRING METHOD
## Declare method that creates class instance from JSON
    public static ${className} fromJson(String json) {
        Gson gson = new Gson();
        return gson.fromJson(json, ${className}.class);
    }
#end

## DUMP METHOD
## Dumps all values to LogCat
    /**
     * Dumps all member variable values to logcat using the class's name as a tag.
     */
    public void dump() {
        dump("${className}");
    }

    /**
     * Dumps all member variable values to logcat, using the specified tag.
     * @param tagName The name of the tag to use when calling logcat.
     */
    public void dump(String tagName) {
#foreach( $field in $fields )
#if($field)
#if(${field.getIsArrayType()})
        if (${field.getPrivateVariableName()} == null) {
#if($useBcLogger)
            BcLogger.v("${field.getPrivateVariableName()} is null");
#else
            Log.v(tagName, "${field.getPrivateVariableName()} is null");
#end
        } else if (${field.getPrivateVariableName()}.isEmpty()) {
#if($useBcLogger)
            BcLogger.v("${field.getPrivateVariableName()} is empty");
#else
            Log.v(tagName, "${field.getPrivateVariableName()} is empty");
#end
        } else {
#if($useBcLogger)
            BcLogger.v("${className}.${field.getPrivateVariableName()} items:");
#else
            Log.v(tagName, "${className}.${field.getPrivateVariableName()} items:");
#end
            for (int i = 0; i < ${field.getPrivateVariableName()}.size(); i++) {
#if($useBcLogger)
                BcLogger.v("  ${field.getPrivateVariableName()}[" + i + "]: " + ${field.getPrivateVariableName()}.get(i));
#else
                Log.v(tagName, "  ${field.getPrivateVariableName()}[" + i + "]: " + ${field.getPrivateVariableName()}.get(i));
#end
            }
        }
#elseif(${field.getIsThrowableType()})
#if($useBcLogger)
        BcLogger.v("${className}.${field.getPrivateVariableName()}: " + ${field.getPrivateVariableName()}.getLocalizedMessage());
#else
        Log.v(tagName, "${className}.${field.getPrivateVariableName()}: " + ${field.getPrivateVariableName()}.getLocalizedMessage());
#end
#else
#if($useBcLogger)
        BcLogger.v("${className}.${field.getPrivateVariableName()}: " + ${field.getPrivateVariableName()});
#else
        Log.v(tagName, "${className}.${field.getPrivateVariableName()}: " + ${field.getPrivateVariableName()});
#end
#end
#end
#end
    }
## PRIVATE METHODS
#if($hasDateType)


    private Date convertStringToDate(String date, String format) {
        if (TextUtils.isEmpty(date) || TextUtils.isEmpty(format))
            return null;

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
        try {
            return simpleDateFormat.parse(date);
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }

    private String convertDateToString(Date date, String format) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
        return simpleDateFormat.format(date);
    }
#end
}