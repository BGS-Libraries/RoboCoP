package ${packageName}.model;

import android.content.ContentValues;
import android.database.Cursor;
#if($hasArrayType || $hasSerializedNames)

#end
#if($hasArrayType)
import com.google.gson.Gson;
#end
#if($hasSerializedNames)
import com.google.gson.annotations.SerializedName;
#end
#if($hasArrayType)
import com.google.gson.reflect.TypeToken;
#end

import ${packageName}.database.table.${tableName}Table;

#if($hasArrayType)
import java.lang.reflect.Type;
#end
#if($hasDateType)
import java.text.ParseException;
import java.text.SimpleDateFormat;
#end
import java.util.ArrayList;
#if($hasDateType)
import java.util.Date;
#end
import java.util.List;
#if($hasDateType)
import java.util.Locale;
#end

public class ${tableName} {
    private long mRowId;
#foreach( $field in $fields )
#if($field)
#if(${field.getSerializedName()})

    @SerializedName("$field.getSerializedName()")
#end
    private ${field.getJavaTypeString()} ${field.getPrivateVariableName()};
#end
#end

#foreach( $field in $fields )
#if($field)
#if(${field.getIsDateType()})
    private static final String ${field.getStaticTimeFormatName()} = "${field.getTimeFormat()}";
#end
#end
#end
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKey = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#if( $foreignKey )
    private Long ${foreignKey};
#end
#end
#end

    private ContentValues mValues = new ContentValues();

    public ${tableName}() {}

    public ${tableName}(final Cursor cursor) {
        this(cursor, false);
    }

    public ${tableName}(final Cursor cursor, boolean prependTableName) {
        String prefix = prependTableName ? ${tableName}Table.TABLE_NAME + "_" : "";
        setRowId(cursor.getLong(cursor.getColumnIndex(prefix + ${tableName}Table._ID)));
#foreach ($field in $fields)
#if($field)
        set${field.getNameAsTitleCase()}(cursor.${field.getJavaTypeStringGetter()}(cursor.getColumnIndex(prefix + ${tableName}Table.${field.getConstantString()}))${field.getBooleanComparison()});
#end
#end
#if( $participatingRelationships )

#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#if( $foreignKeyTitleCase && $foreignKeyConstant)
        set${foreignKeyTitleCase}(cursor.getLong(cursor.getColumnIndex(prefix + ${tableName}Table.${foreignKeyConstant})));
#end
#end
#end
    }

    public ContentValues getContentValues() {
        if (mValues.size() == 0) {
#if($hasArrayType)
            Gson gson = new Gson();
            Type listType;
            String jsonString;

#end
            if(mRowId > 0) {
                mValues.put(${tableName}Table._ID, mRowId);
            }
#foreach ($field in $fields)
#if($field)
#if(${field.getIsArrayType()})

            listType = new TypeToken<List<${field.getFieldArrayType()}>>() {}.getType();
            jsonString = gson.toJson(${field.getPrivateVariableName()}, listType);
            mValues.put(${tableName}Table.${field.getConstantString()}, jsonString);

#else
            mValues.put(${tableName}Table.${field.getConstantString()}, ${field.getPrivateVariableName()});
#end
#end
#end
        }
        return mValues;
    }

    public void setRowId(long _id) {
        mRowId = _id;
        mValues.put(${tableName}Table._ID, _id);
    }

    public Long getRowId() {
        return mRowId;
    }

#foreach ($field in $fields)
#if($field)
#if(${field.getIsDateType()})
    public void set${field.getNameAsTitleCase()}(Date ${field.getFieldName()}) {
        set${field.getNameAsTitleCase()}(convertDateToString(${field.getFieldName()}, ${field.getStaticTimeFormatName()}));
    }

#end
    public void set${field.getNameAsTitleCase()}(${field.getJavaTypeString()} ${field.getFieldName()}) {
        ${field.getPrivateVariableName()} = ${field.getFieldName()};
#if(${field.getIsArrayType()})
        Gson gson = new Gson();
        Type listType = new TypeToken<List<${field.getFieldArrayType()}>>() {}.getType();
        String jsonString = gson.toJson(${field.getFieldName()}, listType);
        mValues.put(${tableName}Table.${field.getConstantString()}, jsonString);
#else
        mValues.put(${tableName}Table.${field.getConstantString()}, ${field.getFieldName()});
#end
    }
#if(${field.getIsArrayType()})
    public void set${field.getNameAsTitleCase()}(String ${field.getFieldName()}) {
        Gson gson = new Gson();
        Type listType = new TypeToken<List<${field.getFieldArrayType()}>>() {}.getType();
        ${field.getPrivateVariableName()} = gson.fromJson(${field.getFieldName()}, listType);
    }
#end

#if(!${field.getIsDateType()})
    public ${field.getJavaTypeString()} get${field.getNameAsTitleCase()}() {
        return ${field.getPrivateVariableName()};
    }

#end
#if(${field.getIsDateType()})
    public Date get${field.getNameAsTitleCase()}() {
        return convertDateFromString(${field.getPrivateVariableName()}, ${field.getStaticTimeFormatName()});
    }

#end
#end
#end
#if( $participatingRelationships )
#foreach( $relationship in $participatingRelationships )
#set( $foreignKeyTitleCase = $relationship.getForeignKeyVariableAsTitleCase($table) )
#set( $foreignKeyVariableName = $relationship.getForeignKeyVariableNameForTable($table) )
#set( $foreignKeyPrivateVariableName = $relationship.getForeignKeyPrivateVariableNameForTable($table) )
#set( $foreignKeyConstant = $relationship.getForeignKeyNameForTable($table) )
#if( $foreignKeyTitleCase )
    public void set${foreignKeyTitleCase}(Long ${foreignKeyVariableName}) {
        ${foreignKeyPrivateVariableName} = ${foreignKeyVariableName};
        mValues.put(${tableName}Table.${foreignKeyConstant}, ${foreignKeyVariableName});
    }

    public Long get${foreignKeyTitleCase}() {
            return ${foreignKeyPrivateVariableName};
    }

#end
#end
#end
    public static List<${tableName}> listFromCursor(Cursor cursor) {
        List<${tableName}> list = new ArrayList<${tableName}>();

        if (cursor != null && cursor.moveToFirst()) {
            do {
                list.add(new ${tableName}(cursor));
            } while (cursor.moveToNext());
        }

        return list;
    }
#if($hasDateType)


    private Date convertDateFromString(String date, String format) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
        try {
            return simpleDateFormat.parse(date);
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }

    private String convertDateToString(Date date, String format) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
        return simpleDateFormat.format(date);
    }
#end
}