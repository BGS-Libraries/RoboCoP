package ${packageName}.model;
## IMPORTS
## Declare all imports in alphabetical order.

import com.google.gson.Gson;
#if($hasSerializedNames)
import com.google.gson.annotations.SerializedName;
#end
#if($hasArrayType)
import com.google.gson.reflect.TypeToken;
#end

#if($hasArrayType)
import java.lang.reflect.Type;
#end
#if($hasDateType)
import java.text.ParseException;
import java.text.SimpleDateFormat;
#end
#if($hasArrayType)
import java.util.ArrayList;
#end
#if($hasDateType)
import java.util.Date;
#end
#if($hasArrayType)
import java.util.List;
#end
#if($hasDateType)
import java.util.Locale;
#end
## CLASS DECLARATION
## Declare the class name.

public class ${className} {
## PRIVATE MEMBER VARIABLES
## Declare all private member variables for this class.
#foreach( $field in $fields )
#if($field)
#if(${field.getSerializedName()})

    @SerializedName("$field.getSerializedName()")
#end
    private ${field.getJavaTypeString()} ${field.getPrivateVariableName()};
#end
#end

## DATE FORMATS
## Declare static fields for any potential date formats.
#foreach( $field in $fields )
#if($field)
#if(${field.getIsDateType()})
    private static final String ${field.getStaticTimeFormatName()} = "${field.getTimeFormat()}";
#end
#end
#end
## CONSTRUCTOR
## Declare basic constructor.

    public ${className}() {}

## SETTERS
## Declare public setter methods.
#foreach ($field in $fields)
#if($field)
#if(${field.getIsDateType()})
    public void set${field.getNameAsTitleCase()}(Date ${field.getFieldName()}) {
        set${field.getNameAsTitleCase()}(convertDateToString(${field.getFieldName()}, ${field.getStaticTimeFormatName()}));
    }

    public void set${field.getNameAsTitleCase()}(long ${field.getFieldName()}) {
        set${field.getNameAsTitleCase()}(new Date(${field.getFieldName()}));
    }

#end
    public void set${field.getNameAsTitleCase()}(${field.getJavaTypeString()} ${field.getFieldName()}) {
        ${field.getPrivateVariableName()} = ${field.getFieldName()};
    }
#if(${field.getIsArrayType()})
    public void set${field.getNameAsTitleCase()}(String ${field.getFieldName()}) {
        Gson gson = new Gson();
        Type listType = new TypeToken<List<${field.getFieldArrayType()}>>() {}.getType();
        ${field.getPrivateVariableName()} = gson.fromJson(${field.getFieldName()}, listType);
    }
#end

## GETTERS
## Declare public getter methods.
#if(${field.getIsDateType()})
    public Date get${field.getNameAsTitleCase()}() {
        return convertStringToDate(${field.getPrivateVariableName()}, ${field.getStaticTimeFormatName()});
    }

#else
    public ${field.getJavaTypeString()} get${field.getNameAsTitleCase()}() {
        return ${field.getPrivateVariableName()};
    }

#end
#end
#end
## TOSTRING METHOD
## Declare method that converts object to JSON
    @Override
    public String toString() {
        Gson gson = new Gson();
        return gson.toJson(this);
    }

## FROMSTRING METHOD
## Declare method that creates class instance from JSON
    public static ${className} fromJson(String json) {
        Gson gson = new Gson();
        return gson.fromJson(json, ${className}.class);
    }

## PRIVATE METHODS
#if($hasDateType)


    private Date convertStringToDate(String date, String format) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
        try {
            return simpleDateFormat.parse(date);
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }

    private String convertDateToString(Date date, String format) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format, Locale.US);
        return simpleDateFormat.format(date);
    }
#end
}